var appConfig = require('appconfig');

var mongoose = require('mongoose');
mongoose.connect(appConfig.mongoUrl());



var Q = require('q');

var Schema = mongoose.Schema;

var userSchema = new Schema({
	provider: String,
	providerId: String,
	displayName: String,
	bookshelf: Array
});


var UserProfile = mongoose.model('UserProfile', userSchema);



exports.find = function(req, res){
	UserProfile.find({}, function(err, results){
		res.send(results);
	})
}


exports.findOrCreate = function(profile){
	console.log(profile.id);
	console.log('Gonna find or create');
	var deferred = Q.defer();

	UserProfile.findOne({'providerId':profile.id}, function(err, result){
		if(err){
			deferred.reject(err);
		}else{
			console.log('findOne::result');
			if(result){
				console.log('got results');
				deferred.resolve(result);
			}else{
				console.log('got no results');
				var _userProfile = new UserProfile();
				_userProfile.provider = profile.provider;
				_userProfile.providerId = profile.id;
				_userProfile.displayName = profile.displayName;
				_userProfile.bookshelf = [];

				_userProfile.save(function(err, results){
					if(!err){
						console.log('no error saving');
						console.log(results);
						deferred.resolve(results);
					}else{
						console.log('error saving');
						deferred.reject(err);
					}
				})
			}

		}
	});

	return deferred.promise;

}

exports.sync = function(user){
	console.log('gonna sync the user ma boy');
	console.log(user);
	var deferred = Q.defer();

	UserProfile.update({providerId: user.providerId}, {
		bookshelf: user.bookshelf
	}, function(err, numberAffected, rawResult){
		if(!err){
			deferred.resolve();
		}else{
			deferred.reject(err);
		}
	});
	//displayName, providerId, provider, _id, bookshelf
	return deferred.promise;
}